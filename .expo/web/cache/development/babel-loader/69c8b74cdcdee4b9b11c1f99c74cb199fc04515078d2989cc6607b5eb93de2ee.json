{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Apifetch } from \"../services/axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Picker from \"../components/Picker\";\nimport ActivityIndicate from \"../components/Activityind\";\nimport SearchBar from \"../components/Picker\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen() {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    Countries = _useState2[0],\n    setCountries = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    Loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    fetchCountries();\n  }, [Loading]);\n  var fetchCountries = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var StoreData = yield AsyncStorage.getItem('CountryData');\n        if (StoreData !== null) {\n          setCountries(JSON.parse(StoreData));\n          setLoading(false);\n        } else {\n          var _yield$Apifetch = yield Apifetch('all'),\n            _yield$Apifetch2 = _slicedToArray(_yield$Apifetch, 2),\n            data = _yield$Apifetch2[0],\n            err = _yield$Apifetch2[1];\n          if (data) {\n            setCountries(data);\n            yield AsyncStorage.setItem('CountryData', JSON.stringify(data));\n            setLoading(false);\n          } else {\n            setLoading(false);\n            AsyncStorage.clear();\n          }\n        }\n      } catch (error) {\n        setLoading(false);\n        AsyncStorage.clear();\n      }\n    });\n    return function fetchCountries() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var onRefresh = function onRefresh() {\n    fetchCountries();\n    setLoading(true);\n  };\n  var renderItem = function renderItem(countries, i) {\n    var _countriesList$name, _countriesList$name2;\n    var countriesList = countries == null ? void 0 : countries.item;\n    var NativeNameList = countriesList.currencies && Object.keys(countriesList.currencies).map(function (code) {\n      var currencyData = countriesList == null ? void 0 : countriesList.currencies[code];\n      return _jsx(_Fragment, {\n        children: _jsxs(View, {\n          style: {\n            flexDirection: 'row',\n            width: '100%',\n            justifyContent: 'space-between'\n          },\n          children: [_jsx(Text, {\n            style: styles.TextStyle,\n            children: currencyData == null ? void 0 : currencyData.name\n          }), _jsx(Text, {\n            style: styles.TextStyle,\n            children: currencyData == null ? void 0 : currencyData.symbol\n          })]\n        }, i)\n      });\n    });\n    return _jsxs(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('CountryDetails', {\n          countriesList: countriesList\n        });\n      },\n      style: {\n        flex: 1,\n        backgroundColor: '#D6E4E5',\n        padding: 10,\n        marginBottom: 10,\n        borderRadius: 10\n      },\n      children: [_jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList == null ? void 0 : (_countriesList$name2 = countriesList.name) == null ? void 0 : _countriesList$name2.common\n      }, (countriesList == null ? void 0 : (_countriesList$name = countriesList.name) == null ? void 0 : _countriesList$name.common).toString()), _jsx(View, {\n        children: NativeNameList\n      }), _jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList == null ? void 0 : countriesList.capital\n      }), _jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList == null ? void 0 : countriesList.region\n      })]\n    });\n  };\n  if (Loading) {\n    return _jsx(ActivityIndicate, {\n      isLoading: Loading\n    });\n  }\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 10,\n      backgroundColor: 'transparent'\n    },\n    children: _jsx(FlatList, {\n      data: Countries,\n      scrollsToTop: true,\n      extraData: Countries,\n      keyExtractor: function keyExtractor(_, index) {\n        return index;\n      },\n      renderItem: renderItem,\n      ListHeaderComponent: _jsx(SearchBar, {\n        setSearchValue: setCountries\n      }),\n      onRefresh: onRefresh,\n      refreshing: Loading\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  TextStyle: {\n    margin: 5\n  }\n});\nexport default HomeScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Apifetch","AsyncStorage","Picker","ActivityIndicate","SearchBar","useNavigation","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","HomeScreen","navigation","_useState","_useState2","_slicedToArray","Countries","setCountries","_useState3","_useState4","Loading","setLoading","fetchCountries","_ref","_asyncToGenerator","StoreData","getItem","JSON","parse","_yield$Apifetch","_yield$Apifetch2","data","err","setItem","stringify","clear","error","apply","arguments","onRefresh","renderItem","countries","i","_countriesList$name","_countriesList$name2","countriesList","item","NativeNameList","currencies","Object","keys","map","code","currencyData","children","View","style","flexDirection","width","justifyContent","Text","styles","TextStyle","name","symbol","TouchableOpacity","onPress","navigate","flex","backgroundColor","padding","marginBottom","borderRadius","common","toString","capital","region","isLoading","FlatList","scrollsToTop","extraData","keyExtractor","_","index","ListHeaderComponent","setSearchValue","refreshing","StyleSheet","create","margin"],"sources":["/Users/hemanth/Desktop/Learn/Countrytest/CountryFind/src/screens/dashboard.js"],"sourcesContent":["import { View, Text, FlatList, RefreshControl, StyleSheet, TouchableOpacity } from 'react-native'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport  { Apifetch } from '../services/axios'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport Picker from '../components/Picker'\nimport ActivityIndicate from '../components/Activityind'\nimport SearchBar from '../components/Picker'\nimport { useNavigation } from '@react-navigation/native'\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n  const [Countries, setCountries] = useState([])\n  const [Loading, setLoading] = useState(false);\n\n  useEffect(() => {\n      fetchCountries()\n  }, [Loading])\n\n    const fetchCountries = async () => {\n      /*\n      * Will fetch all countries if async Store is empty\n      * clear async store if any errors are encountered\n      **/\n      try{\n          const StoreData =await AsyncStorage.getItem('CountryData')\n          \n          if(StoreData!==null){\n            setCountries(JSON.parse(StoreData));\n            setLoading(false)\n\n          } else{\n            const [data,err] = await Apifetch('all');\n\n            if(data){\n              setCountries(data);\n              await AsyncStorage.setItem('CountryData',JSON.stringify(data));\n              setLoading(false)\n\n            }else {\n              setLoading(false)\n              AsyncStorage.clear();\n\n            }\n          }\n      }catch(error){\n        setLoading(false)\n        AsyncStorage.clear();\n\n      }\n    }\n      const onRefresh = () => {\n        //set isRefreshing to true\n        fetchCountries()\n        setLoading(true)\n        // and set isRefreshing to false at the end of your callApiMethod()\n      }\n      \n      const renderItem = (countries,i) => { \n        const countriesList = countries?.item;\n        //minimize the list of datasets\n        const NativeNameList =countriesList.currencies && Object.keys(countriesList.currencies).map((code)=>{\n          const currencyData= countriesList?.currencies[code]\n          return(\n            <>\n              <View key={i} style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n                <Text style={styles.TextStyle}>{currencyData?.name}</Text>\n               <Text style={styles.TextStyle}>{currencyData?.symbol}</Text>\n              </View>\n              </>\n          )\n        })\n        return(\n        <TouchableOpacity onPress={()=>navigation.navigate('CountryDetails',{countriesList})} style={{flex:1,backgroundColor:'#D6E4E5',padding:10,marginBottom:10,borderRadius:10}}>\n          <Text key={(countriesList?.name?.common).toString()} style={styles.TextStyle}>{countriesList?.name?.common}</Text>\n          <View>\n            {NativeNameList}\n          </View>\n          <Text style={styles.TextStyle}>{countriesList?.capital}</Text>\n          <Text style={styles.TextStyle}>{countriesList?.region}</Text>\n        </TouchableOpacity>\n        )\n       }\n\n       if(Loading){\n        return <ActivityIndicate isLoading={Loading}/>\n       }\n\n  return (\n    <View style={{flex:1,padding:10,backgroundColor:'transparent'}}>\n      \n      <FlatList\n        data={Countries}\n        scrollsToTop={true}\n        extraData={Countries}\n        keyExtractor={(_,index) => index}\n        renderItem={renderItem}\n        ListHeaderComponent={<SearchBar setSearchValue={setCountries} />}\n        // stickyHeaderIndices={[0]}\n        onRefresh={onRefresh}\n        refreshing={Loading}\n      />\n    </View>\n  )\n}\nconst styles = StyleSheet.create({\n  TextStyle:{margin:5}\n})\nexport default HomeScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}