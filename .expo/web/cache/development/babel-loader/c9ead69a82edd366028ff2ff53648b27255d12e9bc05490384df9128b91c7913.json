{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Apifetch } from \"../services/axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Picker from \"../components/Picker\";\nimport ActivityIndicate from \"../components/Activityind\";\nimport SearchBar from \"../components/Picker\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen() {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    Countries = _useState2[0],\n    setCountries = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    Currency = _useState4[0],\n    setCurrencies = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    Loading = _useState6[0],\n    setLoading = _useState6[1];\n  useEffect(function () {\n    fetchCountries();\n  }, []);\n  var fetchCountries = function () {\n    var _ref = _asyncToGenerator(function* () {\n      setLoading(true);\n      try {\n        var StoreData = yield AsyncStorage.getItem('CountryData');\n        if (StoreData !== null) {\n          setCountries(JSON.parse(StoreData));\n          setLoading(false);\n        } else {\n          var _yield$Apifetch = yield Apifetch('all'),\n            _yield$Apifetch2 = _slicedToArray(_yield$Apifetch, 2),\n            data = _yield$Apifetch2[0],\n            err = _yield$Apifetch2[1];\n          if (data) {\n            setCountries(data);\n            yield AsyncStorage.setItem('CountryData', JSON.stringify(data));\n            setLoading(false);\n          } else {\n            console.log('error fetching countries');\n            AsyncStorage.clear();\n            setLoading(false);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    });\n    return function fetchCountries() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var onRefresh = function onRefresh() {\n    fetchCountries();\n    setLoading(true);\n  };\n  var renderItem = function renderItem(countries, i) {\n    var countriesList = countries.item;\n    console.log(countriesList.region);\n    for (var currencies in countriesList.currencies) {\n      setCurrencies(countriesList.currencies[currencies]);\n    }\n    return _jsxs(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('CountryDetails');\n      },\n      style: {\n        flex: 1,\n        backgroundColor: '#D6E4E5',\n        padding: 10,\n        marginBottom: 10,\n        borderRadius: 10\n      },\n      children: [_jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.name.common\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'space-between'\n        },\n        children: [_jsx(Text, {\n          style: styles.TextStyle,\n          children: Currency.name\n        }), _jsx(Text, {\n          style: styles.TextStyle,\n          children: Currency.symbol\n        })]\n      }), _jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.capital\n      })]\n    });\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 10,\n      backgroundColor: '#EFF5F5'\n    },\n    children: _jsx(FlatList, {\n      data: Countries,\n      scrollsToTop: true,\n      extraData: Countries,\n      keyExtractor: function keyExtractor(_, index) {\n        return index;\n      },\n      renderItem: renderItem,\n      ListHeaderComponent: function ListHeaderComponent(_ref2) {\n        var item = _ref2.item;\n        return _jsx(SearchBar, {\n          setSearchValue: setCountries\n        });\n      },\n      stickyHeaderIndices: [0],\n      onRefresh: onRefresh,\n      refreshing: Loading\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  TextStyle: {\n    margin: 5\n  }\n});\nexport default HomeScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Apifetch","AsyncStorage","Picker","ActivityIndicate","SearchBar","useNavigation","jsx","_jsx","jsxs","_jsxs","HomeScreen","navigation","_useState","_useState2","_slicedToArray","Countries","setCountries","_useState3","_useState4","Currency","setCurrencies","_useState5","_useState6","Loading","setLoading","fetchCountries","_ref","_asyncToGenerator","StoreData","getItem","JSON","parse","_yield$Apifetch","_yield$Apifetch2","data","err","setItem","stringify","console","log","clear","error","apply","arguments","onRefresh","renderItem","countries","i","countriesList","item","region","currencies","TouchableOpacity","onPress","navigate","style","flex","backgroundColor","padding","marginBottom","borderRadius","children","Text","styles","TextStyle","name","common","View","flexDirection","width","justifyContent","symbol","capital","FlatList","scrollsToTop","extraData","keyExtractor","_","index","ListHeaderComponent","_ref2","setSearchValue","stickyHeaderIndices","refreshing","StyleSheet","create","margin"],"sources":["/Users/hemanth/Desktop/Learn/Countrytest/CountryFind/src/screens/dashboard.js"],"sourcesContent":["import { View, Text, FlatList, RefreshControl, StyleSheet, TouchableOpacity } from 'react-native'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport  { Apifetch } from '../services/axios'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport Picker from '../components/Picker'\nimport ActivityIndicate from '../components/Activityind'\nimport SearchBar from '../components/Picker'\nimport { useNavigation } from '@react-navigation/native'\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n    const [Countries, setCountries] = useState([])\n    const [Currency, setCurrencies] = useState('')\n    const [Loading, setLoading] = useState(false);\n\n    useEffect(() => {\n       fetchCountries()\n    }, [])\n\n    const fetchCountries = async () => {\n      setLoading(true);\n\n      try{\n          const StoreData =await AsyncStorage.getItem('CountryData')\n          \n          if(StoreData!==null){\n            setCountries(JSON.parse(StoreData));\n            setLoading(false)\n\n          } else{\n            const [data,err] = await Apifetch('all');\n\n            if(data){\n              setCountries(data);\n              await AsyncStorage.setItem('CountryData',JSON.stringify(data));\n              setLoading(false)\n\n            }else {\n              console.log('error fetching countries');\n              AsyncStorage.clear();\n              setLoading(false)\n\n            }\n          }\n      }catch(error){\n        console.log(error);\n        setLoading(false)\n\n      }\n      \n    }\n      \n  //     const handleSelectCountry = (country) => {\n  //       onSelectCountry(country);\n  //       };\n  //   const CountryList = ({ countries,i }) => {\n       \n  //     const countriesList = countries.item\n  //     //minimize the list of datasets\n\n  //     for (const currencies in countriesList.currencies){\n  //       setCurrencies(countriesList.currencies[currencies])\n  //     }\n  //       const renderItem = ({ item }) => {\n  //       return(\n  //       <TouchableOpacity onPress={() => handleSelectCountry(item)} style={{flex:1,backgroundColor:'#AFD3E2',padding:10,marginBottom:10,borderRadius:10}}>\n  //         <Text style={styles.TextStyle}>{countriesList.name.common}</Text>\n  //         <View style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n  //         <Text style={styles.TextStyle}>{Currency.name}</Text>\n  //         <Text style={styles.TextStyle}>{Currency.symbol}</Text>\n  //         </View>\n  //         <Text style={styles.TextStyle}>{countriesList.capital}</Text>\n  //       </TouchableOpacity>\n  //       );\n  //   }\n  //     return (\n  //         <FlatList\n  //             data={data}\n  //             renderItem={renderItem}\n  //             keyExtractor={(item) => item.alpha2Code}\n  //         />\n  //     );r\n  // };\n      const onRefresh = () => {\n        //set isRefreshing to true\n        fetchCountries()\n        setLoading(true)\n\n        // and set isRefreshing to false at the end of your callApiMethod()\n      }\n      const renderItem = (countries,i) => { \n        const countriesList = countries.item\n        console.log(countriesList.region);\n        //minimize the list of datasets\n\n        for (const currencies in countriesList.currencies){\n          setCurrencies(countriesList.currencies[currencies])\n        }\n        return(\n        <TouchableOpacity onPress={()=>navigation.navigate('CountryDetails')} style={{flex:1,backgroundColor:'#D6E4E5',padding:10,marginBottom:10,borderRadius:10}}>\n          <Text style={styles.TextStyle}>{countriesList.name.common}</Text>\n          <View style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n          <Text style={styles.TextStyle}>{Currency.name}</Text>\n          <Text style={styles.TextStyle}>{Currency.symbol}</Text>\n          </View>\n          <Text style={styles.TextStyle}>{countriesList.capital}</Text>\n        </TouchableOpacity>\n        )\n       }\n  return (\n    <View style={{flex:1,padding:10,backgroundColor:'#EFF5F5'}}>\n      {/* <ActivityIndicate isLoading={Loading}/> */}\n      <FlatList\n      data={Countries}\n      scrollsToTop={true}\n      extraData={Countries}\n      keyExtractor={(_,index) => index}\n      renderItem={renderItem}\n      ListHeaderComponent={({item})=>(\n        <SearchBar setSearchValue={setCountries}/>\n        )}\n      stickyHeaderIndices={[0]}\n      onRefresh={onRefresh}\n      refreshing={Loading}\n      />\n    </View>\n  )\n}\nconst styles = StyleSheet.create({\n  TextStyle:{margin:5}\n})\nexport default HomeScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}