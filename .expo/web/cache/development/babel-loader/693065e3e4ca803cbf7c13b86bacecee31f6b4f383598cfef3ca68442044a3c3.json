{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Apifetch } from \"../services/axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Picker from \"../components/Picker\";\nimport ActivityIndicate from \"../components/Activityind\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    Countries = _useState2[0],\n    setCountries = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    Currency = _useState4[0],\n    setCurrencies = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    Loading = _useState6[0],\n    setLoading = _useState6[1];\n  useEffect(function () {\n    fetchCountries();\n  }, [Countries]);\n  var fetchCountries = useCallback(_asyncToGenerator(function* () {\n    setLoading(true);\n    try {\n      var StoreData = yield AsyncStorage.getItem('CountryData');\n      if (StoreData !== null) {\n        console.log(StoreData);\n        setCountries(JSON.parse(StoreData));\n      } else {\n        var _yield$Apifetch = yield Apifetch('all'),\n          _yield$Apifetch2 = _slicedToArray(_yield$Apifetch, 2),\n          data = _yield$Apifetch2[0],\n          err = _yield$Apifetch2[1];\n        if (data) {\n          setCountries(data);\n          yield AsyncStorage.setItem('CountryData', JSON.stringify(data));\n          setLoading(false);\n        } else {\n          console.log('error fetching countries');\n          AsyncStorage.clear();\n          setLoading(false);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }), []);\n  var renderItem = function renderItem(countries, i) {\n    var countriesList = countries.item;\n    for (var currencies in countriesList.currencies) {\n      setCurrencies(countriesList.currencies[currencies]);\n    }\n    return _jsxs(View, {\n      style: {\n        flex: 1,\n        backgroundColor: '#AFD3E2',\n        padding: 10,\n        marginBottom: 10,\n        borderRadius: 10\n      },\n      children: [_jsx(Text, {\n        children: countriesList.name.common\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'space-between'\n        },\n        children: [_jsx(Text, {\n          children: Loading.name\n        }), _jsx(Text, {\n          children: Currency.symbol\n        })]\n      }), _jsx(Text, {\n        children: countriesList.capital\n      })]\n    });\n  };\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      padding: 10\n    },\n    children: [_jsx(ActivityIndicate, {\n      isLoading: Loading\n    }), _jsx(FlatList, {\n      data: Countries,\n      scrollsToTop: true,\n      extraData: Countries,\n      keyExtractor: function keyExtractor(_, index) {\n        return index;\n      },\n      renderItem: renderItem,\n      ListHeaderComponent: Picker,\n      stickyHeaderIndices: [0]\n    })]\n  });\n};\nexport default HomeScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Apifetch","AsyncStorage","Picker","ActivityIndicate","jsx","_jsx","jsxs","_jsxs","HomeScreen","_useState","_useState2","_slicedToArray","Countries","setCountries","_useState3","_useState4","Currency","setCurrencies","_useState5","_useState6","Loading","setLoading","fetchCountries","_asyncToGenerator","StoreData","getItem","console","log","JSON","parse","_yield$Apifetch","_yield$Apifetch2","data","err","setItem","stringify","clear","error","renderItem","countries","i","countriesList","item","currencies","View","style","flex","backgroundColor","padding","marginBottom","borderRadius","children","Text","name","common","flexDirection","width","justifyContent","symbol","capital","isLoading","FlatList","scrollsToTop","extraData","keyExtractor","_","index","ListHeaderComponent","stickyHeaderIndices"],"sources":["/Users/hemanth/Desktop/Learn/Countrytest/CountryFind/src/screens/dashboard.js"],"sourcesContent":["import { View, Text, FlatList } from 'react-native'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport  { Apifetch } from '../services/axios'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport Picker from '../components/Picker'\nimport ActivityIndicate from '../components/Activityind'\n\nconst HomeScreen = () => {\n    const [Countries, setCountries] = useState([])\n    const [Currency, setCurrencies] = useState('')\n    const [Loading, setLoading] = useState(false)\n    useEffect(() => {\n       fetchCountries()\n    }, [Countries])\n\n    const fetchCountries = useCallback(async () => {\n      setLoading(true)\n      try{\n          const StoreData =await AsyncStorage.getItem('CountryData')\n          \n          if(StoreData!==null){\n            console.log(StoreData);\n            setCountries(JSON.parse(StoreData));\n          } else{\n            const [data,err] = await Apifetch('all');\n\n            if(data){\n              setCountries(data);\n              await AsyncStorage.setItem('CountryData',JSON.stringify(data));\n              setLoading(false)\n\n            }else {\n              console.log('error fetching countries');\n              AsyncStorage.clear();\n              setLoading(false)\n\n            }\n          }\n      }catch(error){\n        console.log(error);\n        setLoading(false)\n\n      }\n      \n      },[])\n      \n      const renderItem = (countries,i) => { \n        const countriesList = countries.item\n        //minimize the list of datasets\n\n        for (const currencies in countriesList.currencies){\n          setCurrencies(countriesList.currencies[currencies])\n        }\n\n        return(\n        <View style={{flex:1,backgroundColor:'#AFD3E2',padding:10,marginBottom:10,borderRadius:10}}>\n          <Text>{countriesList.name.common}</Text>\n          <View style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n          <Text>{Loading.name}</Text>\n          <Text>{Currency.symbol}</Text>\n          </View>\n          <Text>{countriesList.capital}</Text>\n        </View>\n        )\n       }\n  return (\n    <View style={{flex:1,padding:10}}>\n      <ActivityIndicate isLoading={Loading}/>\n      <FlatList\n      data={Countries}\n      scrollsToTop={true}\n      extraData={Countries}\n      keyExtractor={(_,index) => index}\n      renderItem={renderItem}\n      ListHeaderComponent={Picker}\n      stickyHeaderIndices={[0]}\n      />\n    </View>\n  )\n}\n\nexport default HomeScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}