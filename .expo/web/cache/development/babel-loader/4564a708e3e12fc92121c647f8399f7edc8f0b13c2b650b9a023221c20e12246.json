{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Apifetch } from \"../services/axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Picker from \"../components/Picker\";\nimport ActivityIndicate from \"../components/Activityind\";\nimport SearchBar from \"../components/Picker\";\nimport { useNavigation } from '@react-navigation/native';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen() {\n  var navigation = useNavigation();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    Countries = _useState2[0],\n    setCountries = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    Currency = _useState4[0],\n    setCurrencies = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    Region = _useState6[0],\n    setRegion = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    Loading = _useState8[0],\n    setLoading = _useState8[1];\n  useEffect(function () {\n    fetchCountries();\n    setLoading(true);\n  }, [Loading]);\n  var fetchCountries = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var StoreData = yield AsyncStorage.getItem('CountryData');\n        if (StoreData !== null) {\n          setCountries(JSON.parse(StoreData));\n          setLoading(false);\n        } else {\n          var _yield$Apifetch = yield Apifetch('all'),\n            _yield$Apifetch2 = _slicedToArray(_yield$Apifetch, 2),\n            data = _yield$Apifetch2[0],\n            err = _yield$Apifetch2[1];\n          if (data) {\n            setCountries(data);\n            yield AsyncStorage.setItem('CountryData', JSON.stringify(data));\n            setLoading(false);\n          } else {\n            console.log('error fetching countries');\n            AsyncStorage.clear();\n            setLoading(false);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        setLoading(false);\n      }\n    });\n    return function fetchCountries() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var onRefresh = function onRefresh() {\n    fetchCountries();\n    setLoading(true);\n  };\n  var renderItem = function renderItem(countries, i) {\n    var countriesList = countries.item;\n    var currencyList = [];\n    var nativeNameList = Object.keys(countriesList.name.nativeName).map(function (code) {\n      console.log(countriesList.name.nativeName[code], 'name');\n      return _jsxs(_Fragment, {\n        children: [_jsxs(Text, {\n          style: styles.TextStyle,\n          children: [\"official: \", countriesList.name.nativeName[code].official]\n        }), _jsxs(Text, {\n          style: styles.TextStyle,\n          children: [\"Common: \", countriesList.name.nativeName[code].common]\n        })]\n      });\n    });\n    console.log(nativeNameList, '---->>');\n    return _jsxs(TouchableOpacity, {\n      onPress: function onPress() {\n        return navigation.navigate('CountryDetails', {\n          countriesList: countriesList\n        });\n      },\n      style: {\n        flex: 1,\n        backgroundColor: '#D6E4E5',\n        padding: 10,\n        marginBottom: 10,\n        borderRadius: 10\n      },\n      children: [_jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.name.common\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'space-between'\n        },\n        children: [_jsx(Text, {\n          style: styles.TextStyle,\n          children: Currency.name\n        }), _jsx(Text, {\n          style: styles.TextStyle,\n          children: Currency.symbol\n        })]\n      }), _jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.capital\n      }), _jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.region\n      })]\n    });\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 10,\n      backgroundColor: '#EFF5F5'\n    },\n    children: _jsx(FlatList, {\n      data: Countries,\n      scrollsToTop: true,\n      extraData: Countries,\n      keyExtractor: function keyExtractor(_, index) {\n        return index;\n      },\n      renderItem: renderItem,\n      ListHeaderComponent: function ListHeaderComponent(_ref2) {\n        var item = _ref2.item;\n        return _jsx(SearchBar, {\n          setSearchValue: setCountries,\n          regionData: Region\n        });\n      },\n      stickyHeaderIndices: [0],\n      onRefresh: onRefresh,\n      refreshing: Loading\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  TextStyle: {\n    margin: 5\n  }\n});\nexport default HomeScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Apifetch","AsyncStorage","Picker","ActivityIndicate","SearchBar","useNavigation","jsxs","_jsxs","Fragment","_Fragment","jsx","_jsx","HomeScreen","navigation","_useState","_useState2","_slicedToArray","Countries","setCountries","_useState3","_useState4","Currency","setCurrencies","_useState5","_useState6","Region","setRegion","_useState7","_useState8","Loading","setLoading","fetchCountries","_ref","_asyncToGenerator","StoreData","getItem","JSON","parse","_yield$Apifetch","_yield$Apifetch2","data","err","setItem","stringify","console","log","clear","error","apply","arguments","onRefresh","renderItem","countries","i","countriesList","item","currencyList","nativeNameList","Object","keys","name","nativeName","map","code","children","Text","style","styles","TextStyle","official","common","TouchableOpacity","onPress","navigate","flex","backgroundColor","padding","marginBottom","borderRadius","View","flexDirection","width","justifyContent","symbol","capital","region","FlatList","scrollsToTop","extraData","keyExtractor","_","index","ListHeaderComponent","_ref2","setSearchValue","regionData","stickyHeaderIndices","refreshing","StyleSheet","create","margin"],"sources":["/Users/hemanth/Desktop/Learn/Countrytest/CountryFind/src/screens/dashboard.js"],"sourcesContent":["import { View, Text, FlatList, RefreshControl, StyleSheet, TouchableOpacity } from 'react-native'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport  { Apifetch } from '../services/axios'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport Picker from '../components/Picker'\nimport ActivityIndicate from '../components/Activityind'\nimport SearchBar from '../components/Picker'\nimport { useNavigation } from '@react-navigation/native'\n\nconst HomeScreen = () => {\n  const navigation = useNavigation();\n  const [Countries, setCountries] = useState([])\n  const [Currency, setCurrencies] = useState('')\n  const [Region, setRegion] = useState([])\n  const [Loading, setLoading] = useState(false);\n\n  useEffect(() => {\n      fetchCountries()\n      setLoading(true);\n\n  }, [Loading])\n\n    const fetchCountries = async () => {\n\n      try{\n          const StoreData =await AsyncStorage.getItem('CountryData')\n          \n          if(StoreData!==null){\n            setCountries(JSON.parse(StoreData));\n            setLoading(false)\n\n          } else{\n            const [data,err] = await Apifetch('all');\n\n            if(data){\n              setCountries(data);\n              await AsyncStorage.setItem('CountryData',JSON.stringify(data));\n              setLoading(false)\n\n            }else {\n              console.log('error fetching countries');\n              AsyncStorage.clear();\n              setLoading(false)\n\n            }\n          }\n      }catch(error){\n        console.log(error);\n        setLoading(false)\n\n      }\n    }\n      \n      const onRefresh = () => {\n        //set isRefreshing to true\n        fetchCountries()\n        setLoading(true)\n\n        // and set isRefreshing to false at the end of your callApiMethod()\n      }\n      const renderItem = (countries,i) => { \n        const countriesList = countries.item\n        // console.log(countriesList.region);\n        //minimize the list of datasets\n\n        const currencyList= []\n        const nativeNameList = Object.keys(countriesList.name.nativeName).map((code)=>{\n          console.log(countriesList.name.nativeName[code],'name');\n          return(\n            <>\n              <Text style={styles.TextStyle}>official: {countriesList.name.nativeName[code].official}</Text>\n              <Text style={styles.TextStyle}>Common: {countriesList.name.nativeName[code].common}</Text>\n            </>\n  \n          )\n        })\n        // for (const currencies in countriesList.currencies){\n        //   currencyList.push({\n        //     name:currencies,\n        //     details: countriesList.currencies[currencies]\n        //   })\n        //   setCurrencies(currencyList)\n        // }\nconsole.log(nativeNameList,'---->>');\n        return(\n        <TouchableOpacity onPress={()=>navigation.navigate('CountryDetails',{countriesList})} style={{flex:1,backgroundColor:'#D6E4E5',padding:10,marginBottom:10,borderRadius:10}}>\n          <Text style={styles.TextStyle}>{countriesList.name.common}</Text>\n          <View style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n          <Text style={styles.TextStyle}>{Currency.name}</Text>\n          <Text style={styles.TextStyle}>{Currency.symbol}</Text>\n          </View>\n          <Text style={styles.TextStyle}>{countriesList.capital}</Text>\n          <Text style={styles.TextStyle}>{countriesList.region}</Text>\n        </TouchableOpacity>\n        )\n       }\n  return (\n    <View style={{flex:1,padding:10,backgroundColor:'#EFF5F5'}}>\n      {/* <ActivityIndicate isLoading={Loading}/> */}\n      <FlatList\n      data={Countries}\n      scrollsToTop={true}\n      extraData={Countries}\n      keyExtractor={(_,index) => index}\n      renderItem={renderItem}\n      ListHeaderComponent={({item})=>(\n        <SearchBar setSearchValue={setCountries} regionData={Region}/>\n        )}\n      stickyHeaderIndices={[0]}\n      onRefresh={onRefresh}\n      refreshing={Loading}\n      />\n    </View>\n  )\n}\nconst styles = StyleSheet.create({\n  TextStyle:{margin:5}\n})\nexport default HomeScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}