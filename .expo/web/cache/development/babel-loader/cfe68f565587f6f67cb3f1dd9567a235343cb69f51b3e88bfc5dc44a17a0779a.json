{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Apifetch } from \"../services/axios\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport Picker from \"../components/Picker\";\nimport ActivityIndicate from \"../components/Activityind\";\nimport SearchBar from \"../components/Picker\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar HomeScreen = function HomeScreen(_ref) {\n  var props = _ref.props,\n    navigation = _ref.navigation;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    Countries = _useState2[0],\n    setCountries = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    Currency = _useState4[0],\n    setCurrencies = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    Loading = _useState6[0],\n    setLoading = _useState6[1];\n  useEffect(function () {\n    fetchCountries();\n  }, [Countries]);\n  var fetchCountries = useCallback(_asyncToGenerator(function* () {\n    try {\n      var StoreData = yield AsyncStorage.getItem('CountryData');\n      if (StoreData !== null) {\n        setCountries(JSON.parse(StoreData));\n        setLoading(false);\n      } else {\n        var _yield$Apifetch = yield Apifetch('all'),\n          _yield$Apifetch2 = _slicedToArray(_yield$Apifetch, 2),\n          data = _yield$Apifetch2[0],\n          err = _yield$Apifetch2[1];\n        if (data) {\n          setCountries(data);\n          yield AsyncStorage.setItem('CountryData', JSON.stringify(data));\n          setLoading(false);\n        } else {\n          console.log('error fetching countries');\n          AsyncStorage.clear();\n          setLoading(false);\n        }\n      }\n    } catch (error) {\n      console.log(error);\n      setLoading(false);\n    }\n  }), []);\n  var onRefresh = function onRefresh() {\n    fetchCountries();\n    setLoading(true);\n  };\n  var renderItem = function renderItem(countries, i) {\n    var countriesList = countries.item;\n    for (var currencies in countriesList.currencies) {\n      setCurrencies(countriesList.currencies[currencies]);\n    }\n    return _jsxs(TouchableOpacity, {\n      onPress: function onPress() {\n        navigation.navigate('CountryDetails');\n      },\n      style: {\n        flex: 1,\n        backgroundColor: '#D6E4E5',\n        padding: 10,\n        marginBottom: 10,\n        borderRadius: 10\n      },\n      children: [_jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.name.common\n      }), _jsxs(View, {\n        style: {\n          flexDirection: 'row',\n          width: '100%',\n          justifyContent: 'space-between'\n        },\n        children: [_jsx(Text, {\n          style: styles.TextStyle,\n          children: Currency.name\n        }), _jsx(Text, {\n          style: styles.TextStyle,\n          children: Currency.symbol\n        })]\n      }), _jsx(Text, {\n        style: styles.TextStyle,\n        children: countriesList.capital\n      })]\n    });\n  };\n  return _jsx(View, {\n    style: {\n      flex: 1,\n      padding: 10,\n      backgroundColor: '#EFF5F5'\n    },\n    children: _jsx(FlatList, {\n      data: Countries,\n      scrollsToTop: true,\n      extraData: Countries,\n      keyExtractor: function keyExtractor(_, index) {\n        return index;\n      },\n      renderItem: renderItem,\n      ListHeaderComponent: SearchBar,\n      stickyHeaderIndices: [0],\n      onRefresh: onRefresh,\n      refreshing: Loading\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  TextStyle: {\n    margin: 5\n  }\n});\nexport default HomeScreen;","map":{"version":3,"names":["React","useCallback","useEffect","useState","Apifetch","AsyncStorage","Picker","ActivityIndicate","SearchBar","jsx","_jsx","jsxs","_jsxs","HomeScreen","_ref","props","navigation","_useState","_useState2","_slicedToArray","Countries","setCountries","_useState3","_useState4","Currency","setCurrencies","_useState5","_useState6","Loading","setLoading","fetchCountries","_asyncToGenerator","StoreData","getItem","JSON","parse","_yield$Apifetch","_yield$Apifetch2","data","err","setItem","stringify","console","log","clear","error","onRefresh","renderItem","countries","i","countriesList","item","currencies","TouchableOpacity","onPress","navigate","style","flex","backgroundColor","padding","marginBottom","borderRadius","children","Text","styles","TextStyle","name","common","View","flexDirection","width","justifyContent","symbol","capital","FlatList","scrollsToTop","extraData","keyExtractor","_","index","ListHeaderComponent","stickyHeaderIndices","refreshing","StyleSheet","create","margin"],"sources":["/Users/hemanth/Desktop/Learn/Countrytest/CountryFind/src/screens/dashboard.js"],"sourcesContent":["import { View, Text, FlatList, RefreshControl, StyleSheet, TouchableOpacity } from 'react-native'\nimport React, { useCallback, useEffect, useState } from 'react'\nimport  { Apifetch } from '../services/axios'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport Picker from '../components/Picker'\nimport ActivityIndicate from '../components/Activityind'\nimport SearchBar from '../components/Picker'\n\nconst HomeScreen = ({props,navigation}) => {\n\n    const [Countries, setCountries] = useState([])\n    const [Currency, setCurrencies] = useState('')\n    const [Loading, setLoading] = useState(false);\n\n    useEffect(() => {\n       fetchCountries()\n    }, [Countries])\n\n    const fetchCountries = useCallback(async () => {\n\n      try{\n          const StoreData =await AsyncStorage.getItem('CountryData')\n          \n          if(StoreData!==null){\n            // console.log(StoreData);\n            setCountries(JSON.parse(StoreData));\n            setLoading(false)\n\n          } else{\n            const [data,err] = await Apifetch('all');\n\n            if(data){\n              setCountries(data);\n              await AsyncStorage.setItem('CountryData',JSON.stringify(data));\n              setLoading(false)\n\n            }else {\n              console.log('error fetching countries');\n              AsyncStorage.clear();\n              setLoading(false)\n\n            }\n          }\n      }catch(error){\n        console.log(error);\n        setLoading(false)\n\n      }\n      \n    },[])\n      \n  //     const handleSelectCountry = (country) => {\n  //       onSelectCountry(country);\n  //       };\n  //   const CountryList = ({ countries,i }) => {\n       \n  //     const countriesList = countries.item\n  //     //minimize the list of datasets\n\n  //     for (const currencies in countriesList.currencies){\n  //       setCurrencies(countriesList.currencies[currencies])\n  //     }\n  //       const renderItem = ({ item }) => {\n  //       return(\n  //       <TouchableOpacity onPress={() => handleSelectCountry(item)} style={{flex:1,backgroundColor:'#AFD3E2',padding:10,marginBottom:10,borderRadius:10}}>\n  //         <Text style={styles.TextStyle}>{countriesList.name.common}</Text>\n  //         <View style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n  //         <Text style={styles.TextStyle}>{Currency.name}</Text>\n  //         <Text style={styles.TextStyle}>{Currency.symbol}</Text>\n  //         </View>\n  //         <Text style={styles.TextStyle}>{countriesList.capital}</Text>\n  //       </TouchableOpacity>\n  //       );\n  //   }\n  //     return (\n  //         <FlatList\n  //             data={data}\n  //             renderItem={renderItem}\n  //             keyExtractor={(item) => item.alpha2Code}\n  //         />\n  //     );r\n  // };\n      const onRefresh = () => {\n        //set isRefreshing to true\n        fetchCountries()\n        setLoading(true)\n\n        // and set isRefreshing to false at the end of your callApiMethod()\n      }\n      const renderItem = (countries,i) => { \n        const countriesList = countries.item\n        //minimize the list of datasets\n\n        for (const currencies in countriesList.currencies){\n          setCurrencies(countriesList.currencies[currencies])\n        }\n\n        return(\n        <TouchableOpacity onPress={()=>{navigation.navigate('CountryDetails')}} style={{flex:1,backgroundColor:'#D6E4E5',padding:10,marginBottom:10,borderRadius:10}}>\n          <Text style={styles.TextStyle}>{countriesList.name.common}</Text>\n          <View style={{flexDirection:'row',width:'100%',justifyContent:'space-between'}}>\n          <Text style={styles.TextStyle}>{Currency.name}</Text>\n          <Text style={styles.TextStyle}>{Currency.symbol}</Text>\n          </View>\n          <Text style={styles.TextStyle}>{countriesList.capital}</Text>\n        </TouchableOpacity>\n        )\n       }\n  return (\n    <View style={{flex:1,padding:10,backgroundColor:'#EFF5F5'}}>\n      {/* <ActivityIndicate isLoading={Loading}/> */}\n      <FlatList\n      data={Countries}\n      scrollsToTop={true}\n      extraData={Countries}\n      keyExtractor={(_,index) => index}\n      renderItem={renderItem}\n      ListHeaderComponent={SearchBar}\n      stickyHeaderIndices={[0]}\n      onRefresh={onRefresh}\n      refreshing={Loading}\n      />\n    </View>\n  )\n}\nconst styles = StyleSheet.create({\n  TextStyle:{margin:5}\n})\nexport default HomeScreen"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}